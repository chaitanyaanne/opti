import pandas as pd
from collections import defaultdict

def normalize_pods_in_df(optimized_df, new_csm_column, max_accounts_per_csm=83):
    """
    Normalize optimized_df to group accounts from the same parent_account_id
    under the same CSM (from new_csm_column) if possible.

    Parameters:
    - optimized_df: DataFrame with 'account_id', 'parent_account_id', and CSM name column
    - new_csm_column: column name containing actual CSM names
    - max_accounts_per_csm: maximum accounts a CSM can handle

    Returns:
    - updated_df: DataFrame with normalized assignments in the same CSM name column
    """
    df = optimized_df.copy()

    # Build mappings
    csm_to_accounts = defaultdict(list)
    account_to_csm = dict(zip(df.index, df[new_csm_column]))

    for idx, row in df.iterrows():
        csm = row[new_csm_column]
        csm_to_accounts[csm].append(idx)

    # Group accounts by parent account (families)
    family_groups = df.groupby('parent_account_id').groups

    for parent_id, account_indices in family_groups.items():
        account_indices = list(account_indices)
        if len(account_indices) <= 1:
            continue

        # Count how many accounts from this family are already assigned to each CSM
        csm_counts = defaultdict(int)
        for idx in account_indices:
            csm = df.loc[idx, new_csm_column]
            csm_counts[csm] += 1

        # Preferred order: keep existing CSMs with most family members
        preferred_csms = sorted(csm_counts.items(), key=lambda x: -x[1])
        fallback_csms = [csm for csm in csm_to_accounts if csm not in csm_counts]
        candidate_csms = [csm for csm, _ in preferred_csms] + fallback_csms

        reassigned = set()

        for idx in account_indices:
            if idx in reassigned:
                continue

            for csm in candidate_csms:
                # Remove non-family accounts to make room
                current_accounts = csm_to_accounts[csm]
                to_remove = [i for i in current_accounts if df.loc[i, 'parent_account_id'] != parent_id]

                for i in to_remove:
                    csm_to_accounts[csm].remove(i)
                    df.at[i, new_csm_column] = None  # mark for reassignment

                if len(csm_to_accounts[csm]) < max_accounts_per_csm:
                    csm_to_accounts[csm].append(idx)
                    df.at[idx, new_csm_column] = csm
                    reassigned.add(idx)
                    break

    # Reassign any leftover unassigned accounts
    for idx in df[df[new_csm_column].isna()].index:
        for csm in csm_to_accounts:
            if len(csm_to_accounts[csm]) < max_accounts_per_csm:
                csm_to_accounts[csm].append(idx)
                df.at[idx, new_csm_column] = csm
                break

    return df
